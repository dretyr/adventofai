You: You and the Elf eventually reach a gondola lift station; he says the gondola lift will take you up to the water source, but this is as far as he can bring you. You go inside.

It doesn't take long to find the gondolas, but there seems to be a problem: they're not moving.

"Aaah!"

You turn around to see a slightly-greasy Elf with a wrench and a look of surprise. "Sorry, I wasn't expecting anyone! The gondola lift isn't working right now; it'll still be a while before I can fix it." You offer to help.

The engineer explains that an engine part seems to be missing from the engine, but nobody can figure out which one. If you can add up all the part numbers in the engine schematic, it should be easy to work out which part is missing.

The engine schematic (your puzzle input) consists of a visual representation of the engine. There are lots of numbers and symbols you don't really understand, but apparently any number adjacent to a symbol, even diagonally, is a "part number" and should be included in your sum. (Periods (.) do not count as a symbol.)

Here is an example engine schematic:

467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..
In this schematic, two numbers are not part numbers because they are not adjacent to a symbol: 114 (top right) and 58 (middle right). Every other number is adjacent to a symbol and so is a part number; their sum is 4361.

Of course, the actual engine schematic is much larger. What is the sum of all of the part numbers in the engine schematic?

Write a python script to perform this task.

ChatGPT: To solve this puzzle, the Python script needs to process the engine schematic and sum up all numbers that are adjacent to a symbol. Here's the approach we'll take:

Read the engine schematic from a file.
Identify all part numbers. A part number is a number that is adjacent (including diagonally) to a symbol (anything other than a period or a number).
Sum up these part numbers.
Here's the Python script that implements this logic:

def is_adjacent_to_symbol(x, y, schematic):
    symbols = ['*', '#', '+', '$']
    for dx in [-1, 0, 1]:
        for dy in [-1, 0, 1]:
            if dx == 0 and dy == 0:
                continue
            if 0 <= x + dx < len(schematic) and 0 <= y + dy < len(schematic[x + dx]):
                if schematic[x + dx][y + dy] in symbols:
                    return True
    return False

def sum_part_numbers(file_path):
    with open(file_path, 'r') as file:
        schematic = [line.strip() for line in file]
    
    total_sum = 0
    for i, row in enumerate(schematic):
        num = ''
        for j, char in enumerate(row):
            if char.isdigit():
                num += char
                # Check if it's the last digit in the number
                if j + 1 == len(row) or not row[j + 1].isdigit():
                    if is_adjacent_to_symbol(i, j, schematic):
                        total_sum += int(num)
                    num = ''
            else:
                num = ''
    
    return total_sum

# Example usage
file_path = 'engine_schematic.txt'  # Replace with the path to your engine schematic file
result = sum_part_numbers(file_path)
print("Sum of all part numbers:", result)

This script reads the engine schematic from the specified file. It then checks each character; if it's a digit, the script starts or continues building a number. Once a complete number is found, it checks if the number is adjacent to a symbol. If so, the number is added to the total sum.

Make sure the engine schematic is correctly formatted in the file for accurate results.

You: The output of running this script on the example engine schematic supplied previously is 'Sum of all part numbers: 2375'. According to the puzzle description, the sum is 4361.

ChatGPT: You're correct, and I apologize for the oversight. Let's refine the approach to accurately sum the part numbers in the engine schematic.

The key challenge is correctly identifying numbers that are adjacent to symbols and then summing these numbers. We need to ensure that we are accurately identifying the numbers and their adjacency to symbols. The symbols include '*', '#', '+', and '$', and adjacency includes diagonal neighbors.

Here's the revised script:
def sum_part_numbers(file_path):
    with open(file_path, 'r') as file:
        schematic = [list(line.strip()) for line in file]

    symbols = ['*', '#', '+', '$']
    total_sum = 0

    for i in range(len(schematic)):
        for j in range(len(schematic[i])):
            if schematic[i][j].isdigit():
                # Check if the digit is adjacent to a symbol
                adjacent_to_symbol = False
                for dx in [-1, 0, 1]:
                    for dy in [-1, 0, 1]:
                        if dx == 0 and dy == 0:
                            continue
                        nx, ny = i + dx, j + dy
                        if 0 <= nx < len(schematic) and 0 <= ny < len(schematic[nx]):
                            if schematic[nx][ny] in symbols:
                                adjacent_to_symbol = True
                                break
                    if adjacent_to_symbol:
                        break

                if adjacent_to_symbol:
                    # Extract the full number
                    num = schematic[i][j]
                    k = j + 1
                    while k < len(schematic[i]) and schematic[i][k].isdigit():
                        num += schematic[i][k]
                        k += 1
                    total_sum += int(num)
                    # Skip the digits already processed
                    j = k - 1

    return total_sum

# Example usage
file_path = 'engine_schematic.txt'  # Replace with the path to your engine schematic file
result = sum_part_numbers(file_path)
print("Sum of all part numbers:", result)

